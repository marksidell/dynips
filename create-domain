#!/usr/bin/python

# Associate a custom domain name with the DynipsServer API, or update
# an existing custom domain.
# This script is idempotent.

from __future__ import print_function

import boto3
import sys
from argparse import ArgumentParser

CERTIFICATE_NAME = 'DynipsTSLCertificate'

#======================================================================
# Read the contents of a file, either locally or from S3
#
def readFile(file):
    if file[:5] == 's3://':
        parts = file.split('/')
        content = boto3.client('s3').get_object(
            Bucket=parts[2],
            Key='/'.join(parts[3:]))['Body'].read()
#        print(file)
#        print(content)
        return content

    else:
        return open(file).read()


#======================================================================

parser = ArgumentParser(
    description="Create a custom domain name for a lambda function")

parser.add_argument('--api-name', required=True)
parser.add_argument("--domain-name", required=True)
parser.add_argument("--certificate-file", required=True)
parser.add_argument("--private-key-file", required=True)
parser.add_argument("--chain-file", required=True)
parser.add_argument("--set-cname", type=bool)

args = parser.parse_args()

client = boto3.client('apigateway')


#======================================================================
# Get the ID of the dynips server API

all_apis = client.get_rest_apis().get('items',[])
api = next((x for x in all_apis if x['name'] == args.api_name), None)

if not api:
    sys.stderr.write('ERROR: The {} API is not defined'.format(args.api_name))
    sys.exit(1)

api_id = api['id']


#======================================================================
# If the domain name already exists, update its SSL certificate.
# Otherwise create a new domain name.

domains = client.get_domain_names()

if 'items' in domains and \
    next((x for x in domains['items']
          if x['domainName'] == args.domain_name), None):

    result = client.update_domain_name(
        domainName=args.domain_name,
        patchOperations=[
            {"op": "replace",
                "path": "/certificateBody",
                "value": readFile(args.certificate_file)},
            {"op": "replace",
                "path": "/certificatePrivateKey",
                "value": readFile(args.private_key_file)},
            {"op": "replace",
                "path": "/certificateChain",
                "value": readFile(args.chain_file)},
        ])
else:
    result = client.create_domain_name(
        domainName=args.domain_name,
        certificateName=CERTIFICATE_NAME,
        certificateBody=readFile(args.certificate_file),
        certificatePrivateKey=readFile(args.private_key_file),
        certificateChain=readFile(args.chain_file),
        )

cname = result['distributionDomainName']

with open('cname.txt', 'wt') as f:
    print( 'DOMAINNAME: ', args.domain_name, file=f)
    print( 'CNAME: ', cname, file=f)

print('{} CNAME {}'.format(args.domain_name, cname))

#======================================================================
# Define a CNAME from the domain name to the cloudfront domain name.
#
if args.set_cname:
    r53 = boto3.client('route53')
    zone_id = next(
        (zone['Id']
            for zone in r53.list_hosted_zones()['HostedZones']
            if zone['Name'] == '.'.join(args.domain_name.split('.')[-2:])+'.'),
        None)

    if not zone_id:
        raise Exception('Unable to find hosted zone for {}'.format(args.domain_name))

    r53.change_resource_record_sets(
        HostedZoneId=zone_id,
        ChangeBatch={
            'Changes':[
                {
                    'Action': 'UPSERT',
                    'ResourceRecordSet':
                    {
                        'Name': args.domain_name,
                        'Type': 'CNAME',
                        'TTL': 300,
                        'ResourceRecords': [{'Value': cname }]
                    }
                }
            ]
        })

  

#======================================================================
# Create a mapping from the domain name to the API, for the 'prod'
# deployment. But first delete any existing mappings to the same API.

mappings = client.get_base_path_mappings(
                domainName=args.domain_name).get('items',[])

for m in mappings:
    if m['restApiId'] == api_id:
        client.delete_base_path_mapping(
            domainName=args.domain_name, basePath=m['basePath'])

client.create_base_path_mapping(
    domainName=args.domain_name,
    basePath='',
    restApiId=api_id,
    stage='prod')
