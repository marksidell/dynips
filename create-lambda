#!/usr/bin/python

# Create or update the specified lambda function.
# This script is idempotent.

import boto3
import uuid
import json
from argparse import ArgumentParser

LAMBDA_TIMEOUT = 3
LAMBDA_MEMORY_SIZE = 512
LAMBDA_RUNTIME = 'python2.7'

parser = ArgumentParser(
    description='Create an IAM role for a lambda function')

parser.add_argument('--code-file', required=True)
parser.add_argument('--name', required=True)
parser.add_argument('--iam-role-name', required=True)
parser.add_argument('--sns-arn')

args = parser.parse_args()

#======================================================================
# Look up the ARN for the IAM role to be used for the lambda
# function.

iam = boto3.client('iam')
role = iam.get_role(RoleName=args.iam_role_name)
role_arn = role['Role']['Arn']

if not role_arn:
    raise RuntimeError(
        'Unable to find IAM role {}'.format(args.iam_role_name))


#======================================================================
# If the lambda already exists, update it. Otherwise create a new one.

lambda_name = args.name

# Read the zip file containing the code
with open(args.code_file) as f:
    code = f.read()

description = 'Dynips {} lambda function'.format(args.name)

client = boto3.client('lambda')
functions = client.list_functions()

if next(
    (f for f in functions['Functions'] if f['FunctionName']==lambda_name),
    None):

    print( 'Updating existing lambda {}...'.format( lambda_name))

    lambda_arn = client.update_function_configuration(
        FunctionName=lambda_name,
        Role=role_arn,
        Handler='lambda.lambda_handler',
        Description=description,
        Timeout=LAMBDA_TIMEOUT,
        MemorySize=LAMBDA_MEMORY_SIZE)['FunctionArn']

    client.update_function_code(FunctionName=lambda_name, ZipFile=code)

else:
    print( 'Creating new lambda {}...'.format( lambda_name))

    lambda_arn = client.create_function(
        FunctionName=lambda_name,
        Runtime=LAMBDA_RUNTIME,
        Role=role_arn,
        Handler='lambda.lambda_handler',
        Code={'ZipFile': code},
        Description=description,
        Timeout=LAMBDA_TIMEOUT,
        MemorySize=LAMBDA_MEMORY_SIZE)['FunctionArn']

if args.sns_arn and args.sns_arn != 'none':
    sns = boto3.client('sns');

    subscriptions = sns.list_subscriptions_by_topic(
        TopicArn=args.sns_arn)['Subscriptions']

    if next((s for s in subscriptions if s['Endpoint']==lambda_arn), None):
        print('SNS subscritption already exists.')
    else:
        print( 'Creating subscription {} -> {}'.format(args.sns_arn, lambda_arn))
        sns.subscribe(
            TopicArn=args.sns_arn,
            Protocol='lambda',
            Endpoint=lambda_arn)

    try:
        policy = json.loads(client.get_policy(FunctionName=args.name)['Policy'])
        if next((p for p in policy['Statement']
                    if p['Action']=='lambda:InvokeFunction' and
                        p.get('Principal',{}).get('Service','')=='sns.amazonaws.com'),
                None):
            have_permission = True

    except:
        have_permission = False

    if not have_permission:
        print('Adding sns permission')
        client.add_permission(
            FunctionName=args.name,
            StatementId=str(uuid.uuid4()),
            Principal='sns.amazonaws.com',
            Action='lambda:InvokeFunction',
            SourceArn=args.sns_arn,
        )
